// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: PostWorkflowHookUUIDGenerator)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockPostWorkflowHookUUIDGenerator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockPostWorkflowHookUUIDGenerator(options ...pegomock.Option) *MockPostWorkflowHookUUIDGenerator {
	mock := &MockPostWorkflowHookUUIDGenerator{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockPostWorkflowHookUUIDGenerator) SetFailHandler(fh pegomock.FailHandler) {
	mock.fail = fh
}
func (mock *MockPostWorkflowHookUUIDGenerator) FailHandler() pegomock.FailHandler { return mock.fail }

func (mock *MockPostWorkflowHookUUIDGenerator) GenerateUUID() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockPostWorkflowHookUUIDGenerator().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GenerateUUID", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockPostWorkflowHookUUIDGenerator) VerifyWasCalledOnce() *VerifierMockPostWorkflowHookUUIDGenerator {
	return &VerifierMockPostWorkflowHookUUIDGenerator{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockPostWorkflowHookUUIDGenerator) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockPostWorkflowHookUUIDGenerator {
	return &VerifierMockPostWorkflowHookUUIDGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockPostWorkflowHookUUIDGenerator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockPostWorkflowHookUUIDGenerator {
	return &VerifierMockPostWorkflowHookUUIDGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockPostWorkflowHookUUIDGenerator) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockPostWorkflowHookUUIDGenerator {
	return &VerifierMockPostWorkflowHookUUIDGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockPostWorkflowHookUUIDGenerator struct {
	mock                   *MockPostWorkflowHookUUIDGenerator
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockPostWorkflowHookUUIDGenerator) GenerateUUID() *MockPostWorkflowHookUUIDGenerator_GenerateUUID_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GenerateUUID", params, verifier.timeout)
	return &MockPostWorkflowHookUUIDGenerator_GenerateUUID_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockPostWorkflowHookUUIDGenerator_GenerateUUID_OngoingVerification struct {
	mock              *MockPostWorkflowHookUUIDGenerator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockPostWorkflowHookUUIDGenerator_GenerateUUID_OngoingVerification) GetCapturedArguments() {
}

func (c *MockPostWorkflowHookUUIDGenerator_GenerateUUID_OngoingVerification) GetAllCapturedArguments() {
}
